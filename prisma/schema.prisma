// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Guild {
  id             String    @id @unique
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  premium        Boolean   @default(true)
  settings       Settings?
  bans           Ban[]
  tickets        Ticket[]
  betaInviteCode String?
}

model Settings {
  guildId            String                 @id @unique
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
  guild              Guild                  @relation(fields: [guildId], references: [id])
  logging            Boolean                @default(false)
  loggingChannelId   String?
  exemptRoles        Settings_ExemptRoles[]
  exemptUsers        Settings_ExemptUsers[]
  supportDepartments SupportDepartments[]
}

model Settings_ExemptRoles {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  settings   Settings @relation(fields: [settingsId], references: [guildId])
  settingsId String
  roleId     String
}

model Settings_ExemptUsers {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  settings   Settings @relation(fields: [settingsId], references: [guildId])
  settingsId String
  userId     String
}

model SupportDepartments {
  id                Int      @id @default(autoincrement())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  settings          Settings @relation(fields: [settingsId], references: [guildId])
  settingsId        String
  name              String
  description       String?
  emoji             String?
  inboxChannelId    String
  ticketsCategoryId String
  tickets           Ticket[]
}

model Ban {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  guild       Guild    @relation(fields: [guildId], references: [id])
  guildId     String
  userId      String
  reason      String?
  moderatorId String
  expiresAt   DateTime
}

model Ticket {
  id                  Int                 @id @default(autoincrement())
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  guild               Guild               @relation(fields: [guildId], references: [id])
  guildId             String
  userId              String
  channelId           String?
  supportDepartment   SupportDepartments? @relation(fields: [supportDepartmentId], references: [id])
  supportDepartmentId Int?
  claimerId           String?
  claimed             Boolean             @default(false)
  title               String
  issue               String
  claimMessageId      String?
}

model Feedback {
  id               Int      @id @default(autoincrement())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  userId           String
  message          String
  status           String
  attachment1Url   String?
  attachment2Url   String?
  attachment3Url   String?
  response         String?
  discordMessageId String?
}

model FeedbackBlacklist {
  userId String @id @unique
}

model BetaInviteCode {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  code          String   @unique
  uses          Int      @default(0)
  maxUses       Int      @default(1)
  expiresAt     DateTime
  name          String?
  generatedById String?
}
